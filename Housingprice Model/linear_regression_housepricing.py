# -*- coding: utf-8 -*-
"""linear_Regression_Housepricing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OTjWy_FsVnB873QvwsOnbIgNonEuzZR5
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from datacleaninghousepricing import clean_data_Housepricing

def run_linreg_Housepricing():

    df = clean_data_Housepricing()

    X = df.drop('SalePrice', axis=1)
    y = df['SalePrice']


    # Train/test split: 80% train, 20% test
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Define categorical and numerical feature sets
    cat_cols = ['Location', 'Basement available', 'Quality',
                'Air Conditioning available']

    num_cols = ['Property Area (ft²)', 'Living Area without Basement (ft²)',
                'Basement Area (ft²)', 'Beds', 'Kitchens', 'Baths',
                'Garage Capacity', 'Year Built',
                'last Renovation (year)']

    #Apply scaling to numerical and one-hot encoding to categorical features
    preprocessor = ColumnTransformer([
        ('num', StandardScaler(), num_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols)
    ])

    # Combine preprocessing and model into a single pipeline
    # defining the model and prepare the columns
    pipeline = Pipeline([
        ('preprocessor', preprocessor),
        ('linreg', LinearRegression())
    ])

    pipeline.fit(X_train, y_train)
    y_pred = pipeline.predict(X_test)

    # Evaluate model performance
    metrics = {
        # Average error in the correct unit.
        # Calculates how many dollars I am off on average
        "mean_squared_error": mean_squared_error(y_test, y_pred),
        # Error squared on average, is useful in business cases
        "mean_absolute_error": mean_absolute_error(y_test, y_pred),
        # How much variance the model can explain
        # Shows how well my model compares to the mean
        "r2_score": r2_score(y_test, y_pred)
    }

    return metrics